type ArgumentValue = variant { Int : int32; String : text };
type ContentError = variant { NotAuthorized : text };
type CredentialSpec = record {
  arguments : opt vec record { text; ArgumentValue };
  credential_type : text;
};
type IssuerInfo = record {
  credential_specs : vec CredentialSpec;
  issuer_origin : text;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok; Err : ContentError };
type RpInit = record {
  ii_canister_id : principal;
  ic_root_key_der : blob;
  ii_vc_url : text;
};
type ValidateVpRequest = record {
  effective_vc_subject : principal;
  issuer_origin : text;
  issuer_canister_id : principal;
  vp_jwt : text;
  credential_spec : CredentialSpec;
};
service : (opt RpInit) -> {
  add_admin : (principal) -> (Result);
  add_issuer : (principal, text, vec CredentialSpec) -> (Result);
  config : (RpInit) -> (Result);
  get_admins : () -> (vec principal) query;
  get_issuers : () -> (vec record { principal; IssuerInfo }) query;
  remove_admin : (principal) -> (Result);
  remove_issuer : (principal) -> (Result);
  validate : (ValidateVpRequest) -> (Result_1);
}
